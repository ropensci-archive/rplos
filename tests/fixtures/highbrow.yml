http_interactions:
- request:
    method: get
    uri: http://api.plos.org/search?q=alcohol&wt=json&start=0&rows=10&hl.fl=abstract&hl=true
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.64.1 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.14.1
      date: Tue, 07 Apr 2020 21:31:37 GMT
      content-type: application/json;charset=utf-8
      content-length: '32147'
      connection: keep-alive
      last-modified: Tue, 07 Apr 2020 17:37:13 GMT
      etag: '"Y2I3ZDgwMDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-04-07 21:31:37 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2

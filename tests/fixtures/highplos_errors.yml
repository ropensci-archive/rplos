http_interactions:
- request:
    method: get
    uri: http://api.plos.org/search?q=%2A%3A%2A&wt=json&start=0&hl=true
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.64.1 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: HTTP/1.1 200 OK
      server: nginx/1.14.1
      date: Tue, 07 Apr 2020 21:31:38 GMT
      content-type: application/json;charset=utf-8
      content-length: '21836'
      connection: keep-alive
      last-modified: Tue, 07 Apr 2020 17:37:13 GMT
      etag: '"OTk3ZDgwMDAwMDAwMDAwMFNvbHI="'
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-04-07 21:31:39 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
- request:
    method: get
    uri: http://api.plos.org/search?q=alcohol&wt=json&start=0&hl.fragsize=adsfad&hl=true
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.64.1 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '400'
      message: Bad Request
      explanation: Bad request syntax or unsupported method
    headers:
      status: HTTP/1.1 400 Bad Request
      server: nginx/1.14.1
      date: Tue, 07 Apr 2020 21:31:39 GMT
      content-type: application/json;charset=utf-8
      content-length: '30678'
      connection: keep-alive
      last-modified: Tue, 07 Apr 2020 21:31:38 GMT
      etag: '"171568e4e71"'
      cache-control: no-cache, no-store
      pragma: no-cache
      expires: Sat, 01 Jan 2000 01:00:00 GMT
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-04-07 21:31:39 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
- request:
    method: get
    uri: http://api.plos.org/search?q=alcohol&wt=json&start=0&hl.snippets=adsfad&hl=true
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.64.1 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '400'
      message: Bad Request
      explanation: Bad request syntax or unsupported method
    headers:
      status: HTTP/1.1 400 Bad Request
      server: nginx/1.14.1
      date: Tue, 07 Apr 2020 21:31:39 GMT
      content-type: application/json;charset=utf-8
      content-length: '30680'
      connection: keep-alive
      last-modified: Tue, 07 Apr 2020 21:31:39 GMT
      etag: '"171568e4ed4"'
      cache-control: no-cache, no-store
      pragma: no-cache
      expires: Sat, 01 Jan 2000 01:00:00 GMT
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-04-07 21:31:39 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
